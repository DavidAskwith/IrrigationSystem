// <auto-generated />
using System;
using IrigationSystem.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IrigationSystem.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200222152650_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("IrigationSystem.Entities.HumidityStat", b =>
                {
                    b.Property<int>("HumidityStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastRead")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HumidityStatId");

                    b.HasIndex("PlantId");

                    b.ToTable("HumidityStats");
                });

            modelBuilder.Entity("IrigationSystem.Entities.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Species")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("SubSpecies")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("IrigationSystem.Entities.PlantSensorMapping", b =>
                {
                    b.Property<int>("PlantSensorMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlantSensorMappingId");

                    b.HasIndex("PlantId")
                        .IsUnique();

                    b.ToTable("PlantSensorMappings");
                });

            modelBuilder.Entity("IrigationSystem.Entities.PlantSettings", b =>
                {
                    b.Property<int>("PlantSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("HumidityThresholdHigh")
                        .HasColumnType("REAL");

                    b.Property<float>("HumidityThresholdLow")
                        .HasColumnType("REAL");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlantSettingsId");

                    b.HasIndex("PlantId")
                        .IsUnique();

                    b.ToTable("PlantSettings");
                });

            modelBuilder.Entity("IrigationSystem.Entities.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WaterTime")
                        .HasColumnType("TEXT");

                    b.HasKey("SettingsId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("IrigationSystem.Entities.SunStat", b =>
                {
                    b.Property<int>("SunStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Irradiance")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastRead")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SunStatId");

                    b.HasIndex("PlantId");

                    b.ToTable("SunStats");
                });

            modelBuilder.Entity("IrigationSystem.Entities.TempatureStat", b =>
                {
                    b.Property<int>("TempatureStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastRead")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tempature")
                        .HasColumnType("REAL");

                    b.HasKey("TempatureStatId");

                    b.HasIndex("PlantId");

                    b.ToTable("TempatureStats");
                });

            modelBuilder.Entity("IrigationSystem.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IrigationSystem.Entities.WaterLog", b =>
                {
                    b.Property<int>("WaterLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WaterDate")
                        .HasColumnType("TEXT");

                    b.HasKey("WaterLogId");

                    b.HasIndex("PlantId");

                    b.ToTable("WarterLogs");
                });

            modelBuilder.Entity("IrigationSystem.Entities.HumidityStat", b =>
                {
                    b.HasOne("IrigationSystem.Entities.Plant", "Plant")
                        .WithMany("HumidityStats")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Entities.Plant", b =>
                {
                    b.HasOne("IrigationSystem.Entities.User", "User")
                        .WithMany("Plants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Entities.PlantSensorMapping", b =>
                {
                    b.HasOne("IrigationSystem.Entities.Plant", "Plant")
                        .WithOne("PlantSensorMapping")
                        .HasForeignKey("IrigationSystem.Entities.PlantSensorMapping", "PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Entities.PlantSettings", b =>
                {
                    b.HasOne("IrigationSystem.Entities.Plant", "Plant")
                        .WithOne("PlantSettings")
                        .HasForeignKey("IrigationSystem.Entities.PlantSettings", "PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Entities.Settings", b =>
                {
                    b.HasOne("IrigationSystem.Entities.User", null)
                        .WithOne("Settings")
                        .HasForeignKey("IrigationSystem.Entities.Settings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Entities.SunStat", b =>
                {
                    b.HasOne("IrigationSystem.Entities.Plant", "Plant")
                        .WithMany("SunStats")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Entities.TempatureStat", b =>
                {
                    b.HasOne("IrigationSystem.Entities.Plant", "Plant")
                        .WithMany("TempatureStats")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Entities.WaterLog", b =>
                {
                    b.HasOne("IrigationSystem.Entities.Plant", "Plant")
                        .WithMany("WaterLogs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
