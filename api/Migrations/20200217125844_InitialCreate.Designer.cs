// <auto-generated />
using System;
using IrigationSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IrigationSystem.Migrations
{
    [DbContext(typeof(IrigationSystemContext))]
    [Migration("20200217125844_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("IrigationSystem.Models.HumidityStat", b =>
                {
                    b.Property<int>("HumidityStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastRead")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HumidityStatId");

                    b.HasIndex("PlantId");

                    b.ToTable("HumidityStats");
                });

            modelBuilder.Entity("IrigationSystem.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Species")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("SubSpecies")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("PlantId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            PlantId = 1,
                            Name = "Gary",
                            Species = "Juniper",
                            SubSpecies = "Really nice!"
                        });
                });

            modelBuilder.Entity("IrigationSystem.Models.PlantSensorMapping", b =>
                {
                    b.Property<int>("PlantSensorMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlantSensorMappingId");

                    b.HasIndex("PlantId")
                        .IsUnique();

                    b.ToTable("PlantSensorMappings");
                });

            modelBuilder.Entity("IrigationSystem.Models.PlantSettings", b =>
                {
                    b.Property<int>("PlantSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("HumidityThresholdHigh")
                        .HasColumnType("REAL");

                    b.Property<float>("HumidityThresholdLow")
                        .HasColumnType("REAL");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlantSettingsId");

                    b.HasIndex("PlantId")
                        .IsUnique();

                    b.ToTable("PlantSettings");
                });

            modelBuilder.Entity("IrigationSystem.Models.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WaterTime")
                        .HasColumnType("TEXT");

                    b.HasKey("SettingsId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("IrigationSystem.Models.SunStat", b =>
                {
                    b.Property<int>("SunStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Irradiance")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastRead")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SunStatId");

                    b.HasIndex("PlantId");

                    b.ToTable("SunStats");
                });

            modelBuilder.Entity("IrigationSystem.Models.TempatureStat", b =>
                {
                    b.Property<int>("TempatureStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastRead")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tempature")
                        .HasColumnType("REAL");

                    b.HasKey("TempatureStatId");

                    b.HasIndex("PlantId");

                    b.ToTable("TempatureStats");
                });

            modelBuilder.Entity("IrigationSystem.Models.WaterLog", b =>
                {
                    b.Property<int>("WaterLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WaterDate")
                        .HasColumnType("TEXT");

                    b.HasKey("WaterLogId");

                    b.HasIndex("PlantId");

                    b.ToTable("WarterLogs");
                });

            modelBuilder.Entity("IrigationSystem.Models.HumidityStat", b =>
                {
                    b.HasOne("IrigationSystem.Models.Plant", "Plant")
                        .WithMany("HumidityStats")
                        .HasForeignKey("PlantId");
                });

            modelBuilder.Entity("IrigationSystem.Models.PlantSensorMapping", b =>
                {
                    b.HasOne("IrigationSystem.Models.Plant", "Plant")
                        .WithOne("PlantSensorMapping")
                        .HasForeignKey("IrigationSystem.Models.PlantSensorMapping", "PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Models.PlantSettings", b =>
                {
                    b.HasOne("IrigationSystem.Models.Plant", "Plant")
                        .WithOne("PlantSettings")
                        .HasForeignKey("IrigationSystem.Models.PlantSettings", "PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Models.SunStat", b =>
                {
                    b.HasOne("IrigationSystem.Models.Plant", "Plant")
                        .WithMany("SunStats")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Models.TempatureStat", b =>
                {
                    b.HasOne("IrigationSystem.Models.Plant", "Plant")
                        .WithMany("TempatureStats")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IrigationSystem.Models.WaterLog", b =>
                {
                    b.HasOne("IrigationSystem.Models.Plant", "Plant")
                        .WithMany("WaterLogs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
